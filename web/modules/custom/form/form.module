<?php

/**
 * @file
 * Example of how to use Drupal's mail API.
 */

use Drupal\Component\Utility\Html;

/**
 * Implements hook_mail().
 *
 * This hook defines a list of possible e-mail templates that this module can
 * send. Each e-mail is given a unique identifier, or 'key'.
 *
 * $message comes in with some standard properties already set: 'to' address,
 * 'from' address, and a set of default 'headers' from MailManager::mail(). The
 * goal of hook_mail() is to set the message's 'subject' and 'body' properties,
 * as well as make any adjustments to the headers that are necessary.
 *
 * The $params argument is an array which can hold any additional data required
 * to build the mail subject and body; for example, user-entered form data, or
 * some context information as to where the mail request came from.
 *
 * Note that hook_mail() is not actually a hook. It is only called for a single
 * module, the module named in the first argument of MailManager::mail(). So
 * it's a callback of a type, but not a hook.
 */

  function form_mail($key, &$message, $params) {
    // Each message is associated with a language, which may or may not be the
    // current user's selected language, depending on the type of e-mail being
    // sent. This $options array is used later in the t() calls for subject
    // and body to ensure the proper translation takes effect.
    $options = [
      'langcode' => $message['langcode'],
    ];
    switch ($key) {
      // Send a simple message from the contact form.
      case 'admin_mail':
      //This template is used for admin mail.
        $from = \Drupal::config('system.site')->get('mail');
        $message['to'] = \Drupal::config('system.site')->get('mail');
        $message['subject'] = t('E-mail sent from @site-name', ['@site-name' => $from], $options);
        // Note that the message body is an array, not a string.
        $account = \Drupal::currentUser();
        $message['body'][] = t('@name sent you the following message:', ['@name' => $account->getAccountName()], $options);
        // Because this is just user-entered text, we do not need to translate it.
        // Since user-entered text may have unintentional HTML entities in it like
        // '<' or '>', we need to make sure these entities are properly escaped,
        // as the body will later be transformed from HTML to text, meaning
        // that a normal use of '<' will result in truncation of the message.

        $body =
          "Hi,
            Below are the details,

            First Name: " . $params['first_name'] . "
            Email Address: " . $params['email_address'] . "
            Pincode: " . $params['pincode'] . "
            Empolyee Role: " . $params['employee_role'] . "
            Expiration: " . $params['expiration'] . "
            Phone: " . $params['phone'] . "
            Message: " . $params['textarea'] . "

            See ya!";
        $message['body'][] =  Drupal\Core\Mail\MailFormatHelper::htmlToText($body);
        break;

      case 'end_user_mail' :
        //This template is used for end user mail.
        $from = \Drupal::config('system.site')->get('mail');
        $message['subject'] = t('E-mail sent from @site-name', ['@site-name' => $from], $options);
        $message['to'] = $params['email_address'];
         //Our Custom Config Form Body Content
        $body2 = \Drupal::config('myform.settings')->get('body');
        $message['body'][] =  Drupal\Core\Mail\MailFormatHelper::htmlToText($body2);

    }
  }
